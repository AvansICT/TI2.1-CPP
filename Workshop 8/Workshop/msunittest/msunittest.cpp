#include "pch.h"                     // auto-generated by Visual Studio
#include "CppUnitTest.h"
#include "myapp.hpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace myApp;

namespace UnitTestMyApp
{
    TEST_CLASS(MyAppFreeFunctionTests)
    {
    public:

        TEST_METHOD(Add_PositiveNumbers)
        {
            Assert::AreEqual(5, add(2, 3));
        }

        TEST_METHOD(Add_NegativeNumbers)
        {
            Assert::AreEqual(-5, add(-2, -3));
        }

        TEST_METHOD(Add_WithZero)
        {
            Assert::AreEqual(10, add(10, 0));
        }

        TEST_METHOD(Subtract_PositiveNumbers)
        {
            Assert::AreEqual(6, subtract(10, 4));
        }

        TEST_METHOD(Subtract_NegativeNumbers)
        {
            Assert::AreEqual(1, subtract(-2, -3));
        }

        TEST_METHOD(Subtract_WithZero)
        {
            Assert::AreEqual(5, subtract(5, 0));
        }

        TEST_METHOD(Multiply_PositiveNumbers)
        {
            Assert::AreEqual(12, multiply(3, 4));
        }

        TEST_METHOD(Multiply_NegativeNumbers)
        {
            Assert::AreEqual(-12, multiply(-3, 4));
        }

        TEST_METHOD(Multiply_ByZero)
        {
            Assert::AreEqual(0, multiply(7, 0));
        }

        TEST_METHOD(Divide_ValidNumbers)
        {
            Assert::AreEqual(4, divide(8, 2));
        }

        TEST_METHOD(Divide_NegativeNumbers)
        {
            Assert::AreEqual(-2, divide(-10, 5));
        }

        TEST_METHOD(Divide_ByZero_Throws)
        {
            auto func = []() { divide(5, 0); };
            Assert::ExpectException<std::invalid_argument>(func);
        }

        TEST_METHOD(Modulus_ValidNumbers)
        {
            Assert::AreEqual(1, modulus(10, 3));
        }

        TEST_METHOD(Modulus_NegativeNumbers)
        {
            Assert::AreEqual(-1, modulus(-10, 3));
        }

        TEST_METHOD(Modulus_ByZero_Throws)
        {
            auto func = []() { modulus(10, 0); };
            Assert::ExpectException<std::invalid_argument>(func);
        }
    };


    TEST_CLASS(MyAppClassMethodTests)
    {
    public:
        MathFunctions math; // instance shared per test

        TEST_METHOD(Add_UsingClass)
        {
            Assert::AreEqual(10, math.add(5, 5));
        }

        TEST_METHOD(Subtract_UsingClass)
        {
            Assert::AreEqual(2, math.subtract(10, 8));
        }

        TEST_METHOD(Multiply_UsingClass)
        {
            Assert::AreEqual(15, math.multiply(3, 5));
        }

        TEST_METHOD(Divide_UsingClass)
        {
            Assert::AreEqual(3, math.divide(9, 3));
        }

        TEST_METHOD(Divide_ByZero_UsingClass_Throws)
        {
            auto func = [&]() { math.divide(1, 0); };
            Assert::ExpectException<std::invalid_argument>(func);
        }

        TEST_METHOD(Modulus_UsingClass)
        {
            Assert::AreEqual(1, math.modulus(10, 3));
        }

        TEST_METHOD(Modulus_ByZero_UsingClass_Throws)
        {
            auto func = [&]() { math.modulus(10, 0); };
            Assert::ExpectException<std::invalid_argument>(func);
        }
    };
}
